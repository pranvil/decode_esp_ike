#!/usr/bin/env python3
import glob
import time
import os

class get_file_path(object):
    def __init__(self):
        self.log_path=[]
        self.esp_path=[]
        self.ikev2_path=[]
        
    #get esp_sa file path    
    def get_esp_path(self):
        self.esp_path = glob.glob(r'C:\Users\*\AppData\Roaming\Wireshark\esp_sa')        
        if self.esp_path == []:
            tmp_path = glob.glob(r'C:\Users\*\AppData\Roaming\Wireshark')[0]+'\\'+'esp_sa'
            f = open(tmp_path,'w+')
            f.writelines('# This file is automatically generated, DO NOT MODIFY.')
            f.writelines('\n')
            f.close()
            self.esp_path = tmp_path
        else:
            f = open(self.esp_path[0],'w+')
            f.writelines('# This file is automatically generated, DO NOT MODIFY.')
            f.writelines('\n')
            f.close()
        print('find esp file path==>:',self.esp_path)
        return self.esp_path
    
    def get_log_path(self):        
        search_scope = [r'c:/Users/*/Desktop/*/main_log*',r'C:\Users\*\Desktop\main_log*',r'c:/Users/*/Desktop/*/*/main_log*',r'c:/Users/*/Desktop/*/*/*/main_log*',r'c:/Users/*/Desktop/*/*/*/*/main_log*',r'c:/Users/*/Desktop/*/*/*/*/*/main_log*']
        for i in search_scope:
            if glob.glob(i) != []:
                print('find log path==>:',glob.glob(i))
                self.log_path.extend(glob.glob(i))
        
        if self.log_path == []:
            print('Warning!!!!There is no main_log on desktop')
        return self.log_path        
    def get_ikev2_path(self):
        self.ikev2_path = glob.glob(r'C:\Users\*\AppData\Roaming\Wireshark\ikev2_decryption_table')
        if self.ikev2_path == []:
            tmp_path = glob.glob(r'C:\Users\*\AppData\Roaming\Wireshark')[0]+'\\'+'ikev2_decryption_table'
            f = open(tmp_path,'w+')
            f.writelines('# This file is automatically generated, DO NOT MODIFY.'+'\n')
            f.close()
            self.ikev2_path = tmp_path
        else:
            f = open(self.ikev2_path[0],'w+')
            f.writelines('# This file is automatically generated, DO NOT MODIFY.'+'\n')          
            f.close()
            
        print('find ikev2 file path==>:',self.ikev2_path)
        return self.ikev2_path
            
        

class generate_key_log(object):
    def __init__(self):
        self.log_path = get_file_path().get_log_path()
   
    def filter_key(self):
        f = open('keylog.txt','a')
        for i in self.log_path:
            log_file = open(i,'rb')
            line = log_file.readline()
            spi_list = []
            while line:
                if '[KEY]' in line:
                    f.writelines(line)
                if 'spi =' in line and 'ck =' in line:                    
                    pos1 = line.find('spi = ')
                    pos2 = line.find(',',pos1+3)
                    spi = line[pos1+6:pos2]
                    if spi not in spi_list:
                        f.writelines(line)                    
                        spi_list.append(spi)
                line = log_file.readline()             
            log_file.close()               
        f.close()

class find_key(object):
    def __init__(self):
        t = 1
        self.key_s = ['"IPv6"','"*"','"*"','"*"','','','','']
        self.key = []
        self.esp_path = get_file_path().get_esp_path()
        self.ikev2_path = get_file_path().get_ikev2_path()
    def check_ip_type(self,line):
        if 'src = ' in line:    #SPI& IP address
            if ':' in self.key_s[1][0:8]:
                self.key_s[0] = '\"'+'IPv6'+'\"'
            else:
                self.key_s[0] = '\"'+'IPv4'+'\"'
        elif 'src = ' not in line and 'src' in line:
            if '.' in self.key_s[1]:
                self.key_s[0] = '\"IPv4\"'
            elif ':' in self.key_s[1]:
                self.key_s[0] = '\"IPv6\"'
        else:
            pass
                


    def ikev2_key(self):
        f=open('keylog.txt','r')
        ike_key=['SIP_i','SPI_r','ei','er','encr','ai','ar','']
        line=f.readline()
        #container = ['SPI_i =>','SPI_r =>','Sk_ei secret =>']
        container = ['SPI_i => ','SPI_r => ','Sk_ei secret => ','Sk_er secret => ','encr_','Sk_ai secret => ','Sk_ar secret => ','inter_']
        while line:
            if 'selected proposal' in line:
                pos1 = line.find('selected proposal: IKE:')+23
                pos2 = line.find('/',pos1)
                pos3 = line.find('/',pos2+1)
                encryption = line[pos1:pos2]
                integity = line[pos2+1:pos3]
                key_dic = {'HMAC-SHA-1-96 [RFC2404]':'HMAC_SHA1_96 [RFC2404]','AES-CBC [RFC3602]_256':'AES-CBC-256 [RFC3602]','AES_XCBC_96':'ANY 96-bits of Authentication [No Checking]','AES-CBC [RFC3602]_128':'AES-CBC-128 [RFC3602]','HMAC-SHA-256-128 [RFC4868]':'HMAC_SHA2_256_128 [RFC4868]'}
                encryption = key_dic[encryption]
                integity = key_dic[integity]
                ike_key[4] = '\"'+encryption+'\",'
                ike_key[7] = '\"'+integity+'\"'
                            
            n = 0
            for i in container:
                if i in line:
                    
                    pos1 = line.find(container[n])
                    pos2 = line.rfind('bytes')
                    lenth = int(line[pos1+len(container[n]):pos2-1])       
                    
                    if lenth <= 16:                
                        line = f.readline()
                        pos1 = line.find('[KEY]    0: ')
                        pos2 = 3*lenth-1
                        key = line[pos1+12:pos1+pos2+12].replace(' ','')
                        ike_key[n] = key+','

                    elif lenth > 16 and lenth <= 32:
                        line = f.readline()
                        pos1 = line.find('[KEY]    0: ')
                        pos2 = 47
                        key_part1 = line[pos1+12:pos1+pos2+12].replace(' ','')
                        line = f.readline()
                        pos1 = line.find('[KEY]   16: ')
                        pos2 = 3*lenth-48
                        key_part2 = line[pos1+12:pos1+pos2+12].replace(' ','')      
                        ike_key[n] = key_part1+key_part2+','
                    else:
                        print('warning!!!! some key exceed 32 bytes')
                    
                n = n+1
            if ike_key[3]!='er':

                f1=open(self.ikev2_path[0],'a')
                
                if ike_key[7] == '"ANY 96-bits of Authentication [No Checking]"':
                    ike_key[6] = ','
                    ike_key[5] = ','
                f1.writelines(ike_key)
                f1.writelines('\n')
                f1.close()
                ike_key=['SIP_i','SPI_r','ei','er','encr','ai','ar','']                                    
            line = f.readline()                     
        f.close()
        time.sleep(1)
        print('========ISAKMP DECODE Finished========')
                    

    def esp_sa_key(self):
        f = open('keylog.txt','r')
        line = f.readline()

        
        while line:
            if 'src' in line and 'dst' in line:
                pos1 = line.find('SPI')
                pos2 = line.find('src')
                pos3 = line.find('dst')
                self.key_s[3] = ",\""+line[pos1+4:pos2-2]+"\""
                self.key_s[1] = ",\""+line[pos2+4:pos3-1]+"\""
                self.key_s[2] = ",\""+line[pos3+4:-1]+"\""
            
            self.check_ip_type(line)
            if 'encryption algorithm' in line:  #CK 
                pos1 = line.find('algorithm')
                pos2 = line.find('with')
                temp = line[pos1+10:pos2-1]
                if temp == 'AES_XCBC_96':
                    self.key_s[4] = ",\""+'ANY 96 bit authentication [no checking]'+"\""
                else:
                    self.key_s[4] = ",\""+temp+"\""
                    
            elif 'encryption key' in line:    #CK key, will be fail when length exceed 32
                if 'key => 16' in line:
                    line = f.readline()
                    pos1 = line.find('0: ')
                    self.key_s[5] = ",\"0x"+line[pos1+3:pos1+50].replace(' ','')+"\""

                else: 
                    line = f.readline()
                    pos1 = line.find('0: ')              
                    self.key_s[5] = ",\"0x"+line[pos1+3:pos1+50].replace(' ','')+"\""
                    line = f.readline()
                    pos1 = line.find('16: ')                
                    self.key_s[5] = self.key_s[5][:-1] + line[pos1+3:pos1+51].replace(' ','')+'\"'
                    
                    
            elif 'integrity algorithm' in line:  #IK 
                pos1 = line.find('algorithm')
                pos2 = line.find('with')
                temp = line[pos1+10:pos2-1]
                        
                if temp == 'AES_XCBC_96':
                    self.key_s[6] = ",\""+'ANY 96 bit authentication [no checking]'+"\""
                else:
                    self.key_s[6] = ",\""+temp+"\""

            elif 'integrity key' in line:  # IK KEY
                if 'key => 16' in line:            
                    line = f.readline()
                    pos1 = line.find('0: ')
                    self.key_s[7] = ",\"0x"+line[pos1+3:pos1+50].replace(' ','')+"\""                    
                    self.write_key(self.esp_path[0],self.key_s) 
                else:
                    line = f.readline()                              
                    pos1 = line.find('0: ')
                    self.key_s[7] = ",\"0x"+line[pos1+3:pos1+50].replace(' ','')+"\""
                    line = f.readline()                    
                    pos1 = line.find('16: ')
                    self.key_s[7] = self.key_s[7][:-1] + line[pos1+3:pos1+51].replace(' ','')+'\"'                    
                    self.write_key(self.esp_path[0],self.key_s)
            line = f.readline()
        f.close()
        time.sleep(1)
        print('========IKEV2 DECODE Finished========')


    def ik_ck_key(self):
        f = open('keylog.txt','r')
        line=f.readline()
        while line:
            if 'spi =' in line and 'ck =' in line:
                t = 1
                element = ['src = ','dst = ','spi = ','encry_algo = ','ck = ','integrity_algo = ','ik = ']
                for i in element:
                    if i == 'src = ' in line or i == 'dst = ' in line:
                        if "port = " not in line:
                            pos1 = line.find(i)
                            pos2 = line.find(',',pos1+3)
                            n = len(i)
                            ip = line[pos1+n:pos2]                         
                            pos3 = ip.rfind(":")
                            self.key_s[t] = ',\"'+ip[0:pos3]+'\"'                                                      
                            t = t+1
                        elif "port = " in line and 'create' not in line:
                            pos1 = line.find(i)
                            pos2 = line.find(',',pos1+3)
                            n = len(i)
                            self.key_s[t] = ',\"'+line[pos1+n:pos2]+'\"'
                            t = t+1

                    else:
                        pos1 = line.find(i)
                        pos2 = line.find(',',pos1+3)
                        n = len(i)
                        if pos2 != -1:
                            self.key_s[t] = ',\"'+line[pos1+n:pos2]+'\"'
                            t = t+1                                        
                        else:
                            if ', ' not in line[pos1:-1]:
                                pos2 = line.find(' (',pos1+3)
                                self.key_s[t] = ',\"'+line[pos1+n:pos2]+'\"'
                                t = t + 1
                            else:
                                self.key_s[t] = ',\"'+line[pos1+n:-1]+'\"'
                                self.key_s[t] = self.key_s[t].strip('/n')
                                t = t + 1
                    
                self.check_ip_type(line)
                algorithmList = {'aes-cbc':'AES-CBC [RFC3602]','null':'NULL','hmac-md5':'HMAC-MD5-96 [RFC2403]','hmac-sha1':'HMAC-SHA-1-96 [RFC2404]','3des-cbc':'TripleDES-CBC [RFC2451]'}                                
                self.key_s[4] = ',\"'+algorithmList[self.key_s[4][2:-1]]+'\"'                
                self.key_s[6] = ',\"'+algorithmList[self.key_s[6][2:-1]]+'\"'            
                self.write_key(self.esp_path[0],self.key_s)
            line = f.readline()            
        f.close()
        time.sleep(1)
        print('========ESP DECODE Finished========')

        

    def write_key(self,esp_path,key):
        f = open(esp_path,'a')
        f.writelines(key)
        f.writelines('\n')
        f.close()

generate_key_log().filter_key()
run = find_key()
run.ikev2_key()
run.esp_sa_key()
run.ik_ck_key()
print('program is shutting down.......')
time.sleep(3)
os.remove('keylog.txt')


